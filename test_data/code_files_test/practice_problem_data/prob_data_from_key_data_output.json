{
  "name": "Problem Inputs for Code Bank Pilot1 Smoke Test Problems",
  "version": "0.9",
  "Evaluation_Version": "Pilot1",
  "code_list": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "specification": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\n\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for * to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import *` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method * with the tests.",
      "primary_method_name": "*"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "testing_import_statement": "from genai_code_file import heap_queue_largest",
      "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nPlease write python pytest test code that comprehensively tests each student's code for * to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import *` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method * with the tests.",
      "primary_method_name": "*"
     },
    {
      "trial_id": "00003_make_palindrome",
      "testing_import_statement": "from genai_code_file import is_palindrome,make_palindrome",
      "specification": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nPlease write python pytest test code that comprehensively tests each student's code for * to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import *` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method * with the tests.",
      "primary_method_name": "*"
   },
    {
      "trial_id": "00004_unique",
      "testing_import_statement": "from genai_code_file import unique",
      "specification": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\nPlease write python pytest test code that comprehensively tests each student's code for * to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import *` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method * with the tests.",
      "primary_method_name": "*"
    }
  ]
}
