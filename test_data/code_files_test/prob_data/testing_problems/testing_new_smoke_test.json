{
  "name": "Code Bank Pilot1 Smoke Test Problems",
  "version": "0.95",
  "Evaluation_Version": "Pilot1",
  "code_files": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from gen_ai_code_file import add",
      "source": "HumanEval",
      "source_text": "HumanEval/53",
      "lines_per_method": "1",
      "num_methods": "1",
      "imports_used": "no",
      "category": "simple",
      "specification": "def add(x: int, y: int):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x: int, y: int):\n    if (not isinstance(x, int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    if (not isinstance(x, int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + y\n",
      "baseline_reference_test_code": "from gen_ai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n\n    def test_add(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n",
      "baseline_specification_test_code": "from gen_ai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n\n    def test_add(self):\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "testing_import_statement": "from gen_ai_code_file import heap_queue_largest",
      "source": "MBPP",
      "source_text": "Benchmark Questions Verification V2.ipynb, 4",
      "lines_per_method": "2",
      "num_methods": "1",
      "imports_used": "yes",
      "category": "simple",
      "specification": "def heap_queue_largest(nums: list[float], n: int):\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats and n is not an integer,\n    raise a TypeError exception. If n is less than 1, raise a ValueError exception.\n    \"\"\"\n",
      "code_correct": "import heapq as hq\ndef heap_queue_largest(nums: list[float] ,n: int):\n  if (not isinstance(nums, list)):\n      raise TypeError('Input nums must be a list of real numbers.')\n  if not all([isinstance(i, float) for i in nums]):\n      raise TypeError('Input nums must be a list of real numbers.')\n  if (not isinstance(n, int)):\n      raise TypeError('Input n must be a positive integer.')\n  if n <= 0:\n      raise ValueError('Input n must be a positive integer.')\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
      "code_incorrect_1": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  if (not isinstance(nums, list)):\n      raise TypeError('Input nums must be a list of real numbers.')\n  if not all([isinstance(i, float) for i in nums]):\n      raise TypeError('Input nums must be a list of real numbers.')\n  if (not isinstance(n, int)):\n      raise TypeError('Input n must be a positive integer.')\n  if n <= 0:\n      raise ValueError('Input n must be a positive integer.')\n  largest_nums = hq.nlargest(n, nums[1:])\n  return largest_nums\n",
      "code_incorrect_t": "import heapq as hq\ndef heap_queue_largest(nums: list[float] ,n: int):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
      "baseline_reference_test_code": "from gen_ai_code_file import heap_queue_largest\n\n\nclass TestCode(object):\n    def test_gc(self):\n        assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n        assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n        assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
      "baseline_specification_test_code": "from gen_ai_code_file import heap_queue_largest\n\n\nclass TestCode(object):\n    def test_gc(self):\n        pass\n"
    },
    {
      "trial_id": "00003_make_palindrome",
      "testing_import_statement": "from gen_ai_code_file import make_palindrome, is_palindrome",
      "source": "HumanEval",
      "source_text": "HumanEval/10",
      "lines_per_method": "5",
      "num_methods": "2",
      "imports_used": "no",
      "category": "extended",
      "specification": "def make_palindrome(st: str):\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise\n    a TypeError exception.\n    \"\"\"\n",
      "code_correct": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(st: str) -> str:\n    if (not isinstance(st, str)):\n      raise TypeError('Input string must be a string.')\n    if not st:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(st[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return st + st[:beginning_of_suffix][::-1]\n",
      "code_incorrect_1": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(st: str) -> str:\n    if (not isinstance(st, str)):\n      raise TypeError('Input string must be a string.')\n    if not st:\n        return ''\n\n    beginning_of_suffix = 1\n\n    while not is_palindrome(st[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return st + st[:beginning_of_suffix][::-1]\n",
      "code_incorrect_t": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(st: str) -> str:\n    if not st:\n        return ''\n\n    beginning_of_suffix = 1\n\n    while not is_palindrome(st[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return st + st[:beginning_of_suffix][::-1]\n",
      "baseline_reference_test_code": "from gen_ai_code_file import make_palindrome\n\n\nclass TestCode(object):\n    def test_gc(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n",
      "baseline_specification_test_code": "from gen_ai_code_file import make_palindrome\n\n\nclass TestCode(object):\n    def test_gc(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n"
    },
    {
      "trial_id": "00004_unique",
      "testing_import_statement": "from gen_ai_code_file import unique",
      "source": "HumanEval",
      "source_text": "HumanEval/34",
      "lines_per_method": "1",
      "num_methods": "1",
      "imports_used": "no",
      "category": "simple",
      "specification": "from typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order. \n    If l is not a list whose elements are a combination of integers, strings and floats, throw a TypeError exception. \n    \"\"\"",
      "code_correct": "from typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    if (not isinstance(l, list)):\n      raise TypeError('Input l must be a list of elements that are integers, strings, or real numbers.')\n    if not all([(isinstance(i, float) or isinstance(i, int) or isinstance(i, str))  for i in l]):\n      raise TypeError('Input l must be a list of elements that are integers, strings, or real numbers.')\n    return sorted(list(set(l)))\n",
      "code_incorrect_1": "from typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    if (not isinstance(l, list)):\n      raise TypeError('Input l must be a list of elements that are integers, strings, or real numbers.')\n    if not all([(isinstance(i, float) or isinstance(i, int) or isinstance(i, str))  for i in l]):\n      raise TypeError('Input l must be a list of elements that are integers, strings, or real numbers.')\n    return list(set(l))\n",
      "code_incorrect_t": "from typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    return sorted(list(set(l)))\n",
      "baseline_reference_test_code": "from gen_ai_code_file import unique\n\n\nclass TestCode(object):\n    def test_gc(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n",
      "baseline_specification_test_code": "from gen_ai_code_file import unique\n\n\nclass TestCode(object):\n    def test_gc(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n"
    }
  ]
}
