{
  "name": "Problem Inputs for Code Bank Pilot1 Smoke Test Problems",
  "version": "0.95",
  "Evaluation_Version": "Pilot1",
  "code_list": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "specification": "def add(x: int, y: int):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\ndef add(x: int, y: int):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for `` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after."
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "testing_import_statement": "from genai_code_file import heap_queue_largest",
      "specification": "def heap_queue_largest(nums: list[float], n: int):\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats and n is not an integer,\n    raise a TypeError exception. If n is less than 1, raise a ValueError exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\ndef heap_queue_largest(nums: list[float], n: int):\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats and n is not an integer,\n    raise a TypeError exception. If n is less than 1, raise a ValueError exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for `` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after."
    },
    {
      "trial_id": "00003_make_palindrome",
      "testing_import_statement": "from genai_code_file import is_palindrome,make_palindrome",
      "specification": "def make_palindrome(st: str):\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise\n    a TypeError exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\ndef make_palindrome(st: str):\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise\n    a TypeError exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for `` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after."
    },
    {
      "trial_id": "00004_unique",
      "testing_import_statement": "from genai_code_file import unique",
      "specification": "from typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order. \n    If l is not a list whose elements are a combination of integers, strings and floats, throw a TypeError exception. \n    \"\"\"",
      "prompt_fixed": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\nfrom typing import Union\ndef unique(l: list[Union[int, str, float]]):\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order. \n    If l is not a list whose elements are a combination of integers, strings and floats, throw a TypeError exception. \n    \"\"\"\n\nPlease write python test code that comprehensively tests the student's code for `` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after."
    }
  ]
}