{
  "name": "Problem Inputs for Code Bank Pilot1 Smoke Test Problems",
  "version": "0.9",
  "Evaluation_Version": "Pilot1",
  "code_files": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "specification": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
      "code_given": "def add(x: int, y: int):\n    return x + 2*y\n",
      "prompt_fixed": "Here is the specification for 00001_add:\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n\nHere is the code for that trial, as well as other supporting code:\n\ndef add(x: int, y: int):\n    return x + 2*y\n\n\nPlease write python code consisting of pytest test methods that tests the correctness of the code for 00001_add.\n"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "testing_import_statement": "from genai_code_file import heap_queue_largest",
      "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n",
      "code_given": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums[1:])\n  return largest_nums\n",
      "prompt_fixed": "Here is the specification for 00002_heap_queue_largest:\n\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nHere is the code for that trial, as well as other supporting code:\n\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums[1:])\n  return largest_nums\n\n\nPlease write python code consisting of pytest test methods that tests the correctness of the code for 00002_heap_queue_largest.\n"
    },
    {
      "trial_id": "00003_make_palindrome",
      "testing_import_statement": "from genai_code_file import is_palindrome,make_palindrome",
      "specification": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
      "code_given": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 1\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
      "prompt_fixed": "Here is the specification for 00003_make_palindrome:\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n\nHere is the code for that trial, as well as other supporting code:\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 1\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\n\nPlease write python code consisting of pytest test methods that tests the correctness of the code for 00003_make_palindrome.\n"
    },
    {
      "trial_id": "00004_unique",
      "testing_import_statement": "from genai_code_file import unique",
      "specification": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"",
      "code_given": "def unique(l: list):\n    return sorted(list(set(l)))\n",
      "prompt_fixed": "Here is the specification for 00004_unique:\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\nHere is the code for that trial, as well as other supporting code:\n\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\nPlease write python code consisting of pytest test methods that tests the correctness of the code for 00004_unique.\n"
    }
  ]
}
