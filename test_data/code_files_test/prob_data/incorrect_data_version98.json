{
  "name": "Problem Inputs for Code Bank Pilot1 Smoke Test Problems",
  "version": "0.98",
  "Evaluation_Version": "Pilot1",
  "code_list": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "primary_method_name": "add",
      "specification": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for add to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import add` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method add with the tests."
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "testing_import_statement": "from genai_code_file import heap_queue_largest",
      "primary_method_name": "heap_queue_largest",
      "specification": "from typing import Union\ndef heap_queue_largest(nums: list[Union(int, float)], n: int) ->  list[Union[int, float]]:\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats or n is not an integer,\n    raise a TypeError exception. If n is an integer less than 1 or greater than the length of nums, raise a ValueError exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nfrom typing import Union\ndef heap_queue_largest(nums: list[Union(int, float)], n: int) ->  list[Union[int, float]]:\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats or n is not an integer,\n    raise a TypeError exception. If n is an integer less than 1 or greater than the length of nums, raise a ValueError exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for heap_queue_largest to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import heap_queue_largest` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method heap_queue_largest with the tests."
    },
    {
      "trial_id": "00003_make_palindrome",
      "testing_import_statement": "from genai_code_file import is_palindrome,make_palindrome",
      "primary_method_name": "make_palindrome",
      "specification": "def make_palindrome(st: str) -> str:\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise a TypeError exception.\n    \"\"\"\n",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef make_palindrome(st: str) -> str:\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise a TypeError exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for make_palindrome to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import make_palindrome` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method make_palindrome with the tests."
    },
    {
      "trial_id": "00004_unique",
      "testing_import_statement": "from genai_code_file import unique",
      "primary_method_name": "unique",
      "specification": "from typing import Union\ndef unique(l: Union[list[Union[int, float]], list[str]]) -> Union[list[Union[int, float]], list[str]]:\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order.\n    l is a list of real numbers or l is a list of strings.\n    If l is not a list whose elements are either all real numbers or all strings, throw a TypeError exception.\n    \"\"\"",
      "prompt_fixed": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nfrom typing import Union\ndef unique(l: Union[list[Union[int, float]], list[str]]) -> Union[list[Union[int, float]], list[str]]:\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order.\n    l is a list of real numbers or l is a list of strings.\n    If l is not a list whose elements are either all real numbers or all strings, throw a TypeError exception.\n    \"\"\"\n\nPlease write python pytest test code that comprehensively tests each student's code for unique to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import unique` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method unique with the tests."
    }
  ]
}
