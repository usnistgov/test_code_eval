{
  "name": "Key Inputs for Add Up Tests",
  "version": "0.91",
  "Evaluation_Version": "Pilot1",
  "code_list": [
    {
      "trial_id": "00001_add_regtestcorrect_noexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00002_add_regtestincorrect_noexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00003_add_regtestcorrect_correxc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00004_add_regtestincorrect_correxc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00005_add_regtestcorrect_incexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00006_add_regtestincorrect_incexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00007_add_regtestcorrect_missexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00008_add_regtestincorrect_missexc",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00009_add_regtestcorrect_correxc_sec",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00010_add_regtestincorrect_correxc_sec",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00011_add_regtestcorrect_incexc_sec",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00012_add_regtestincorrect_incexc_sec",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00013_add_regtestcorrect_incexc_th",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    },
    {
      "trial_id": "00014_add_regtestcorrect_incexc_se",
      "testing_import_statement": "from genai_code_file import add",
      "source": "HumanEval",
      "source_problem_id": "HumanEval/53",
      "category": "simple",
      "specification": "def add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n",
      "code_correct": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n",
      "code_incorrect_1": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_incorrect_t": "def add(x: int, y: int):\n    return x + 2*y\n",
      "code_given_flag": "code_correct",
      "code_given": "def add(x, y):\n    if (not isinstance(x,int)) or (not isinstance(y, int)):\n        raise TypeError('Inputs x and y must both be integers.')\n    return x + y\n"
    }
  ]
}