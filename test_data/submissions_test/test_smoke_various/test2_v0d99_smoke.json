{
  "name": "Test System Outputs Version 2",
  "version": "0.95",
  "system": "test2",
  "code_list": [
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for add to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import add` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method add with the tests.",
      "test_output": "###|=-=-=beginning of tests=-=-=|\n\nimport pytest\nfrom genai_code_file import add\n\n# Testing with valid inputs\ndef test_add_positive_numbers():\n    assert add(5, 7) == 12\n    assert add(100, 200) == 300\n\n# Testing with a zero\ndef test_add_zero():\n    assert add(0, 0) == 0\n    assert add(10, 0) == 10\n\n# Testing with negative numbers\ndef test_add_negative_numbers():\n    assert add(-5, -7) == -12\n    assert add(-100, -200) == -300\n\n# Testing with a mix of positive and negative numbers\ndef test_add_mixed_numbers():\n    assert add(5, -7) == -2\n    assert add(-100, 200) == 100\n\n# Testing with a floating point numbers\ndef test_add_floating_point_numbers():\n    assert add(1.1, 2.2) == 3.3\n    assert add(-1.1, -2.2) == -3.3\n\n# Testing for TypeError on non-integer input\ndef test_add_non_integer_input():\n    with pytest.raises(TypeError):\n        add(5, '7')\n    with pytest.raises(TypeError):\n        add('10', 20)\n\n###|=-=-=end of tests=-=-=|",
      "test_code": "from importlib import reload\nimport pytest\nimport genai_code_file\nreload(genai_code_file)\nfrom genai_code_file import add\n\n# Testing with valid inputs\ndef test_add_positive_numbers():\n    assert add(5, 7) == 12\n    assert add(100, 200) == 300\n\n# Testing with a zero\ndef test_add_zero():\n    assert add(0, 0) == 0\n    assert add(10, 0) == 10\n\n# Testing with negative numbers\ndef test_add_negative_numbers():\n    assert add(-5, -7) == -12\n    assert add(-100, -200) == -300\n\n# Testing with a mix of positive and negative numbers\ndef test_add_mixed_numbers():\n    assert add(5, -7) == -2\n    assert add(-100, 200) == 100\n\n# Testing with a floating point numbers\ndef test_add_floating_point_numbers():\n    assert add(1.1, 2.2) == 3.3\n    assert add(-1.1, -2.2) == -3.3\n\n# Testing for TypeError on non-integer input\ndef test_add_non_integer_input():\n    with pytest.raises(TypeError):\n        add(5, '7')\n    with pytest.raises(TypeError):\n        add('10', 20)"
    },
    {
      "trial_id": "00001_add",
      "testing_import_statement": "from genai_code_file import add",
      "prompt_number": "1",
      "prompt": "We are asking students to write Python code that meets the following specification:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for add Please write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import add` the line after '###|=-=-=beginning of tests=-=-=|'.",
      "test_output": "```python\n###|=-=-=beginning of tests=-=-=|\nimport pytest\nfrom genai_code_file import add\n\ndef test_add_with_positive_numbers():\n    assert add(5, 7) == 12\n\ndef test_add_with_negative_numbers():\n    assert add(-3, -4) == -7\n\ndef test_add_with_zero():\n    assert add(0, 0) == 0\n\ndef test_add_with_one_negative_number():\n    assert add(-2, 3) == 1\n\ndef test_add_with_one_positive_number():\n    assert add(7, 0) == 7\n\ndef test_add_with_non_integer():\n    with pytest.raises(TypeError):\n        add(5, '7')\n    with pytest.raises(TypeError):\n        add('5', 7)\n    with pytest.raises(TypeError):\n        add('5', '7')\n\n###|=-=-=end of tests=-=-=|\n```",
      "test_code": "import pytest\nfrom genai_code_file import add\n\ndef test_add_with_positive_numbers():\n    assert add(5, 7) == 12\n\ndef test_add_with_negative_numbers():\n    assert add(-3, -4) == -7\n\ndef test_add_with_zero():\n    assert add(0, 0) == 0\n\ndef test_add_with_one_negative_number():\n    assert add(-2, 3) == 1\n\ndef test_add_with_one_positive_number():\n    assert add(7, 0) == 7\n\ndef test_add_with_non_integer():\n    with pytest.raises(TypeError):\n        add(5, '7')\n    with pytest.raises(TypeError):\n        add('5', 7)\n    with pytest.raises(TypeError):\n        add('5', '7')"
    }
  ]
}