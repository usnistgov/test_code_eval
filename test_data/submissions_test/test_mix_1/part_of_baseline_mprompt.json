{
  "name": "NIST Baseline Reference Code Submission Pilot1 Smoke Test Problems Fixed Track",
  "version": "0.99",
  "system": "nist_baseline_reference_code",
  "code_list": [
    {
      "trial_id": "00001_add",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for add to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import add` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method add with the tests.",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")\n\n",
      "test_code": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")\n\n"
    },
    {
      "trial_id": "00001_add",
      "prompt_number": "1",
      "prompt": "I am giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement\n\ndef add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for `add` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after.",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")\n\n",
      "test_code": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")\n\n"
    },
    {
      "trial_id": "00001_add",
      "prompt_number": "9",
      "prompt": "I am giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement\n\ndef add(x, y):\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for `add` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after.",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")",
      "test_code": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")"
    },
    {
      "trial_id": "00004_unique",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nfrom typing import Union\ndef unique(l: Union[list[Union[int, float]], list[str]]) -> Union[list[Union[int, float]], list[str]]:\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order.\n    l is a list of real numbers or l is a list of strings.\n    If l is not a list whose elements are either all real numbers or all strings, throw a TypeError exception.\n    \"\"\"\n\nPlease write python pytest test code that comprehensively tests each student's code for unique to determine if the submitted code satisfies the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate correct tests, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Import the code being tested by adding the line `from genai_code_file import unique` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method unique with the tests.",
      "primary_method_name": "unique",
      "test_output": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n    def test_additional_cases(self):\n        assert unique([17, 12, 14, 17, 12, 15]) == [12, 14, 15, 17]\n        assert unique([15.12, 53, 15.12]) == [15.12, 53]\n        assert unique([]) == []\n        assert unique([0]) == [0]\n        assert unique([1.5, -4.3, 1, 10, 3.7]) == [-4.3, 1, 1.5, 3.7, 10]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n        with pytest.raises(TypeError):\n            unique([\"abcde\", True, 15])\n        with pytest.raises(TypeError):\n            unique([\"abcde\", 15.12, 15])\n        with pytest.raises(TypeError):\n            unique([15.12, \"apple\", \"diagram\", 53, 15.12, \"apple\"])",
      "test_code": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n    def test_additional_cases(self):\n        assert unique([17, 12, 14, 17, 12, 15]) == [12, 14, 15, 17]\n        assert unique([15.12, 53, 15.12]) == [15.12, 53]\n        assert unique([]) == []\n        assert unique([0]) == [0]\n        assert unique([1.5, -4.3, 1, 10, 3.7]) == [-4.3, 1, 1.5, 3.7, 10]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n        with pytest.raises(TypeError):\n            unique([\"abcde\", True, 15])\n        with pytest.raises(TypeError):\n            unique([\"abcde\", 15.12, 15])\n        with pytest.raises(TypeError):\n            unique([15.12, \"apple\", \"diagram\", 53, 15.12, \"apple\"])"
    },
    {
      "trial_id": "00004_unique",
      "prompt_number": "7",
      "prompt": "I am giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement\n\ndef unique(l):\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order.\n    If l is not a list, throw a TypeError exception. \n    \"\"\"\n\nPlease write python test code that comprehensively tests the student's code for `add` to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after.",
      "primary_method_name": "unique",
      "test_output": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_unique(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n",
      "test_code": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_unique(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n"
    }
  ]
}
