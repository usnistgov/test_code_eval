{
  "name": "NIST Baseline Two Test Code Submission Pilot1 Smoke Test Problems Fixed Track",
  "version": "0.98",
  "system": "nist_baseline_two_test_code",
  "code_list": [
    {
      "trial_id": "00001_add",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for add to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import add` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method add with the tests.",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")",
      "test_code": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")"
    },
    {
      "trial_id": "00001_add",
      "prompt_number": "1",
      "prompt": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Given two integers x, and y, return the sum of x and y. If either x or y is not\n    an integer, raise a TypeError Exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for add to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest.  Please generate enough tests so that you are confident that the test cases cover all of the functionality in the specification. Furthermore, please write tests that test edge cases, including tests that check for TypeErrors. More importantly, only generate tests that you are confident are correct and do not provide any tests you are unsure about. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after. Within the code that you write, please 'import pytest' if needed, but do not import any additional python packages besides the packages used in the assignment. To import the method add being tested, please add the line `from genai_code_file import add` the line after'###|=-=-=beginning of tests=-=-=|'.",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")",
      "test_code": "from genai_code_file import add\nimport pytest\n\nclass TestCode(object):\n    def test_add(self):\n        assert add(2, 3) == 5\n        with pytest.raises(TypeError):\n            add(\"abc\", \"def\")"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nfrom typing import Union\ndef heap_queue_largest(nums: list[Union(int, float)], n: int) ->  list[Union[int, float]]:\n    \"\"\"\n    Given a list of real numbers nums and a positive integer n, return the n largest numbers in list num\n    as a list of numbers in descending order. If nums is not a list of floats or n is not an integer,\n    raise a TypeError exception. If n is an integer less than 1 or greater than the length of nums, raise a ValueError exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for heap_queue_largest to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import heap_queue_largest` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method heap_queue_largest with the tests.",
      "primary_method_name": "heap_queue_largest",
      "test_output": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_heap_queue_largest(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n\n",
      "test_code": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_heap_queue_largest(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n\n"
    },
    {
      "trial_id": "00003_make_palindrome",
      "prompt_number": "0",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\ndef make_palindrome(st: str) -> str:\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise a TypeError exception.\n    \"\"\"\n\n\nPlease write python pytest test code that comprehensively tests each student's code for make_palindrome to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import make_palindrome` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method make_palindrome with the tests.",
      "primary_method_name": "make_palindrome",
      "test_output": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_make_palindrome(self):\n        assert make_palindrome('cat') == 'catac'\n        with pytest.raises(TypeError):\n            make_palindrome([5672])\n",
      "test_code": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_make_palindrome(self):\n        assert make_palindrome('cat') == 'catac'\n        with pytest.raises(TypeError):\n            make_palindrome([5672])\n"
    },
     {
      "trial_id": "00003_make_palindrome",
      "prompt_number": "7",
      "prompt": "We are giving an assignment for my students in the class. The requirement is for them to write Python code that does the following.\n\nRequirement:\n\ndef make_palindrome(st: str) -> str:\n    \"\"\"\n    Given a string st, return the shortest palindrome that begins with the supplied string str. A palindrome is a string\n    that reads the same when read backwards or forwards. If st is not a string, raise a TypeError exception.\n    \"\"\"\n\n\nPlease write python test code that comprehensively tests the student's code for make_palindrome to determine if the submitted code correctly meet the requirement or not. When writing tests, please write tests that can be tested with the python package pytest.  Please generate enough tests so that you are confident that the test cases cover all of the functionality in the specification. Furthermore, please write tests that test edge cases, including tests that check for TypeErrors. More importantly, only generate tests that you are confident are correct and do not provide any tests you are unsure about. Furthermore, when writing the python test code, please write '###|=-=-=beginning of tests=-=-=|' immediately before the test code that you provide. When the tests are finished, please write '###|=-=-=end of tests=-=-=|' immediately after. Within the code that you write, please 'import pytest' if needed, but do not import any additional python packages besides the packages used in the assignment. To import the method make_palindrome being tested, please add the line `from genai_code_file import make_palindrome` the line after'###|=-=-=beginning of tests=-=-=|'.",
      "primary_method_name": "make_palindrome",
      "test_output": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_make_palindrome(self):\n        assert make_palindrome('cat') == 'catac'\n        with pytest.raises(TypeError):\n            make_palindrome([5672])\n",
      "test_code": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_make_palindrome(self):\n        assert make_palindrome('cat') == 'catac'\n        with pytest.raises(TypeError):\n            make_palindrome([5672])\n"
    },
    {
      "trial_id": "00004_unique",
      "prompt_number": "1",
      "prompt": "We are giving an assignment for our students in the class. The requirement is for each student to write Python code that meets the following specification.\n\nSpecification:\n\nfrom typing import Union\ndef unique(l: Union[list[Union[int, float]], list[str]]) -> Union[list[Union[int, float]], list[str]]:\n    \"\"\"\n    Given a list of elements l, return the unique elements of l as a list of elements in sorted (ascending) order.\n    l is a list of real numbers or l is a list of strings.\n    If l is not a list whose elements are either all real numbers or all strings, throw a TypeError exception.\n    \"\"\"\n\nPlease write python pytest test code that comprehensively tests each student's code for unique to determine if the submitted code correctly meets the specification or not. When writing tests:\n* write a comprehensive test suite,\n* test edge cases,\n* only generate tests that you are confident are correct, and\n* include tests for TypeError cases.\n\nPlease write '###|=-=-=beginning of tests=-=-=|' before the tests. Write '###|=-=-=end of tests=-=-=|' immediately after the tests. Import any needed packages, including pytest. Additionally import the code being tested by adding the line `from genai_code_file import unique` the line after '###|=-=-=beginning of tests=-=-=|'. Do not provide an implementation of the method unique with the tests.",
      "primary_method_name": "unique",
      "test_output": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_unique(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n",
      "test_code": "from genai_code_file import unique\nimport pytest\n\nclass TestCode(object):\n    def test_unique(self):\n        assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n        with pytest.raises(TypeError):\n            unique(\"abcde\")\n"
    }
  ]
}