{
  "name": "NIST Baseline Reference Code Submission Smoke Test Problems Fixed Track",
  "version": "0.95",
  "system": "nist_baseline_reference_code",
  "code_list": [
    {
      "trial_id": "00001_add",
      "prompt_number": "0",
      "prompt": "hello",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n",
      "test_code": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n"
    },
      {
      "trial_id": "00001_add",
      "prompt_number": "1",
      "prompt": "hello2",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n",
      "test_code": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n"
    },
    {
      "trial_id": "00001_add",
      "prompt_number": "8",
      "prompt": "hello2",
      "primary_method_name": "add",
      "test_output": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n",
      "test_code": "from genai_code_file import add\nimport pytest\nimport random\n\nclass TestCode(object):\n    def test_reference(self):\n        assert add(0, 1) == 1\n        assert add(1, 0) == 1\n        assert add(2, 3) == 5\n        assert add(5, 7) == 12\n        assert add(7, 5) == 12\n\n        for i in range(100):\n            x, y = random.randint(0, 1000), random.randint(0, 1000)\n            assert add(x, y) == x + y\n\n    def test_additional_cases(self):\n        assert add(0, 0) == 0\n        assert add(-5, 5) == 0\n        assert add(-5, -5) == -10\n        assert add(13, -12) == 1\n        assert add(-7, 3) == -4\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            add(\"abc\", 5)\n        with pytest.raises(TypeError):\n            add(3.2, 4.6)\n        with pytest.raises(TypeError):\n            add(7, 5.3)\n\n"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "prompt_number": "0",
      "prompt": "hello",
      "primary_method_name": "heap_queue_largest",
      "test_output": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3) == [85, 75, 65]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],2) == [85, 75]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],5) == [85, 75, 65, 58, 35]\n\n    def test_additional_cases(self):\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 1) == [24]\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 2) == [24, 22.5]\n        assert heap_queue_largest([101.3, 13.8, 19, 22.5, 24.8], 2) == [101.3, 24.8]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            heap_queue_largest(\"abcde\", 3)\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 0)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8], 3)",
      "test_code": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3) == [85, 75, 65]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],2) == [85, 75]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],5) == [85, 75, 65, 58, 35]\n\n    def test_additional_cases(self):\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 1) == [24]\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 2) == [24, 22.5]\n        assert heap_queue_largest([101.3, 13.8, 19, 22.5, 24.8], 2) == [101.3, 24.8]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            heap_queue_largest(\"abcde\", 3)\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 0)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8], 3)"
    },
    {
      "trial_id": "00002_heap_queue_largest",
      "prompt_number": "1",
      "prompt": "hello2",
      "primary_method_name": "heap_queue_largest",
      "test_output": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3) == [85, 75, 65]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],2) == [85, 75]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],5) == [85, 75, 65, 58, 35]\n\n    def test_additional_cases(self):\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 1) == [24]\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 2) == [24, 22.5]\n        assert heap_queue_largest([101.3, 13.8, 19, 22.5, 24.8], 2) == [101.3, 24.8]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            heap_queue_largest(\"abcde\", 3)\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 0)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8], 3)",
      "test_code": "from genai_code_file import heap_queue_largest\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3) == [85, 75, 65]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],2) == [85, 75]\n        assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],5) == [85, 75, 65, 58, 35]\n\n    def test_additional_cases(self):\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 1) == [24]\n        assert heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 2) == [24, 22.5]\n        assert heap_queue_largest([101.3, 13.8, 19, 22.5, 24.8], 2) == [101.3, 24.8]\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            heap_queue_largest(\"abcde\", 3)\n        with pytest.raises(TypeError):\n            heap_queue_largest([\"abcde\", \"bcdef\", \"efghij\"], 3)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8, 19, 22.5, 24], 0)\n        with pytest.raises(ValueError):\n            heap_queue_largest([15.2, 13.8], 3)"
    },
    {
      "trial_id": "00003_make_palindrome",
      "prompt_number": "0",
      "prompt": "hello",
      "primary_method_name": "make_palindrome",
      "test_output": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n",
      "test_code": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n"
    },
    {
      "trial_id": "00003_make_palindrome",
      "prompt_number": "1",
      "prompt": "hello",
      "primary_method_name": "make_palindrome",
      "test_output": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n",
      "test_code": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n"
    },
    {
      "trial_id": "00003_make_palindrome",
      "prompt_number": "4",
      "prompt": "hello2",
      "primary_method_name": "make_palindrome",
      "test_output": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n",
      "test_code": "from genai_code_file import make_palindrome\nimport pytest\n\nclass TestCode(object):\n    def test_reference(self):\n        assert make_palindrome('') == ''\n        assert make_palindrome('cat') == 'catac'\n        assert make_palindrome('cata') == 'catac'\n        assert make_palindrome('') == ''\n        assert make_palindrome('x') == 'x'\n        assert make_palindrome('xyz') == 'xyzyx'\n        assert make_palindrome('xyx') == 'xyx'\n        assert make_palindrome('jerry') == 'jerryrrej'\n\n    def test_additional_cases(self):\n        assert make_palindrome('racecar') == 'racecar'\n        assert make_palindrome('hataho') == 'hatahohataho'\n\n    def test_additional_types(self):\n        with pytest.raises(TypeError):\n            make_palindrome(5672)\n"
    }
  ]
}